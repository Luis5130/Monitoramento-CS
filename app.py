import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots # Para m√∫ltiplos gr√°ficos em uma figura

# --- Carregar dados do arquivo CSV ---
@st.cache_data
def carregar_dados():
    csv_file_path = "dados_semanais.csv" # Certifique-se de que este arquivo existe na mesma pasta

    try:
        df = pd.read_csv(csv_file_path)
    except FileNotFoundError:
        st.error(f"Erro: O arquivo '{csv_file_path}' n√£o foi encontrado. Por favor, certifique-se de que ele est√° na mesma pasta do script.")
        st.stop()

    df["Data"] = pd.to_datetime(df["Data"], format="%d/%m/%Y", dayfirst=True)
    df = df.set_index("Data")
    df = df.sort_index()

    return df

df = carregar_dados()

st.title("üìä An√°lise de Performance ao Longo do Tempo e Comparativo de Per√≠odos")

# --- VISUALIZA√á√ÉO DE TEND√äNCIA AO LONGO DO TEMPO (SIMILAR √Ä FOTO 1) ---
st.header("Tend√™ncia das M√©tricas ao Longo do Tempo")

# Obter todas as colunas num√©ricas (m√©tricas)
metricas_para_grafico_linha = df.columns.tolist()

if not metricas_para_grafico_linha:
    st.warning("Nenhuma m√©trica num√©rica encontrada para exibir no gr√°fico de tend√™ncia.")
else:
    fig_linha = go.Figure()

    for col in metricas_para_grafico_linha:
        fig_linha.add_trace(go.Scatter(x=df.index, y=df[col], mode='lines+markers', name=col))

    fig_linha.update_layout(
        title="Evolu√ß√£o das M√©tricas Semanais",
        xaxis_title="Data",
        yaxis_title="Contagem",
        hovermode="x unified" # Exibe hover para todas as linhas na mesma data
    )
    st.plotly_chart(fig_linha, use_container_width=True)


# --- SELE√á√ÉO DE PER√çODOS PARA COMPARATIVO ---
st.sidebar.header("Sele√ß√£o de Per√≠odos para Comparativo")

min_date = df.index.min().date()
max_date = df.index.max().date()

st.sidebar.subheader("Per√≠odo 1")
data_inicio_p1 = st.sidebar.date_input("Data de In√≠cio P1", value=min_date, min_value=min_date, max_value=max_date, key="p1_start")
data_fim_p1 = st.sidebar.date_input("Data de Fim P1", value=max_date, min_value=min_date, max_value=max_date, key="p1_end")

st.sidebar.subheader("Per√≠odo 2")
data_inicio_p2 = st.sidebar.date_input("Data de In√≠cio P2", value=min_date, min_value=min_date, max_value=max_date, key="p2_start")
data_fim_p2 = st.sidebar.date_input("Data de Fim P2", value=max_date, min_value=min_date, max_value=max_date, key="p2_end")


# --- Garantir que as datas de fim sejam maiores ou iguais √†s datas de in√≠cio ---
if data_inicio_p1 > data_fim_p1:
    st.sidebar.error("Erro: A data de in√≠cio do Per√≠odo 1 n√£o pode ser posterior √† data de fim.")
    st.stop()

if data_inicio_p2 > data_fim_p2:
    st.sidebar.error("Erro: A data de in√≠cio do Per√≠odo 2 n√£o pode ser posterior √† data de fim.")
    st.stop()


# --- Filtrar dados por per√≠odo ---
df_p1 = df.loc[pd.to_datetime(data_inicio_p1):pd.to_datetime(data_fim_p1)]
df_p2 = df.loc[pd.to_datetime(data_inicio_p2):pd.to_datetime(data_fim_p2)]

if df_p1.empty or df_p2.empty:
    st.warning("Um ou ambos os per√≠odos selecionados n√£o cont√™m dados. Por favor, ajuste as datas.")
else:
    # --- Calcular totais para cada per√≠odo ---
    colunas_numericas = df.columns # As m√©tricas s√£o todas as colunas exceto o √≠ndice 'Data'
    
    totais_p1 = df_p1[colunas_numericas].sum()
    totais_p2 = df_p2[colunas_numericas].sum()

    # --- Calcular a diferen√ßa percentual ---
    diferenca_percentual = pd.Series(index=colunas_numericas, dtype=float)
    
    for col in colunas_numericas:
        val_p1 = totais_p1.get(col, 0)
        val_p2 = totais_p2.get(col, 0)
        
        if val_p1 == 0:
            if val_p2 > 0:
                diferenca_percentual[col] = float('inf') # Aumento infinito
            else:
                diferenca_percentual[col] = 0 # Ambos zero, diferen√ßa zero
        else:
            diferenca_percentual[col] = ((val_p2 - val_p1) / val_p1) * 100

    # --- Criar DataFrame para exibi√ß√£o ---
    st.header("Comparativo de Per√≠odos Selecionados")
    df_comparativo = pd.DataFrame({
        "M√©trica": colunas_numericas,
        f"Total Per√≠odo 1 ({data_inicio_p1.strftime('%d/%m/%Y')} a {data_fim_p1.strftime('%d/%m/%Y')})": totais_p1.values,
        f"Total Per√≠odo 2 ({data_inicio_p2.strftime('%d/%m/%Y')} a {data_fim_p2.strftime('%d/%m/%Y')})": totais_p2.values,
        "Diferen√ßa Percentual (%)": diferenca_percentual.values
    })

    st.dataframe(df_comparativo.style.format({
        f"Total Per√≠odo 1 ({data_inicio_p1.strftime('%d/%m/%Y')} a {data_fim_p1.strftime('%d/%m/%Y')})": "{:,.0f}",
        f"Total Per√≠odo 2 ({data_inicio_p2.strftime('%d/%m/%Y')} a {data_fim_p2.strftime('%d/%m/%Y')})": "{:,.0f}",
        "Diferen√ßa Percentual (%)": "{:,.2f}%"
    }))


    # --- Gr√°fico de Barras da Diferen√ßa Percentual (Similar √† Foto 2) ---
    st.subheader("Gr√°fico de Diferen√ßa Percentual entre Per√≠odo 1 e Per√≠odo 2")

    fig_bar = go.Figure()

    fig_bar.add_trace(go.Bar(
        x=df_comparativo["M√©trica"],
        y=df_comparativo["Diferen√ßa Percentual (%)"],
        name="Diferen√ßa Percentual",
        marker_color=['green' if x >= 0 else 'red' for x in df_comparativo["Diferen√ßa Percentual (%)"]],
        hovertemplate="<br>".join([
            "M√©trica: %{x}",
            "Diferen√ßa: %{y:.2f}%",
        ])
    ))

    fig_bar.update_layout(
        title="Diferen√ßa Percentual por M√©trica",
        xaxis_title="M√©trica",
        yaxis_title="Diferen√ßa Percentual (%)",
        yaxis_tickformat=".0f",
        showlegend=False
    )

    st.plotly_chart(fig_bar, use_container_width=True)

    with st.expander("üîç Ver dados brutos do Per√≠odo 1"):
        st.dataframe(df_p1.reset_index())
    with st.expander("üîç Ver dados brutos do Per√≠odo 2"):
        st.dataframe(df_p2.reset_index())
